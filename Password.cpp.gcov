        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:
        -:    4:using std::string;
        -:    5:
        -:    6:/*
        -:    7:  The function receives a string counts how many times the same character 
        -:    8:  occurs at the beginning of the string, before any other characters (or the
        -:    9:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   10:  'z' and any ASCII characters are allowed.
        -:   11:*/
function _ZN8Password24count_leading_charactersENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 58%
        1:   12:int Password::count_leading_characters(string phrase){
        1:   13:  int repetition = 1;
        1:   14:  int index = 0;
        -:   15:
       1*:   16:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0
branch  8 taken 1 (fallthrough)
    #####:   17:    repetition++;
    #####:   18:    index++;
        -:   19:  }
        1:   20:  return repetition;
        -:   21:}
        -:   22:
        -:   23:
function _ZN8Password14has_mixed_caseENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 94%
        1:   24:bool Password::has_mixed_case(string phrase){
        1:   25:  bool has_upper = false;
        1:   26:        bool has_lower = false;
        -:   27:
        6:   28:        for (char c : phrase) {
call    0 returned 1
call    1 returned 1
call    2 returned 5
call    3 returned 5
call    4 returned 6
branch  5 taken 5
branch  6 taken 1 (fallthrough)
        5:   29:            if (std::isupper(c)) {
branch  0 taken 3 (fallthrough)
branch  1 taken 2
        3:   30:                has_upper = true;
        2:   31:            } else if (std::islower(c)) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   32:                has_lower = true;
        -:   33:            }
        -:   34:        }
        -:   35:
       1*:   36:        return has_upper && has_lower;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -:   37:    }
        -:   38:
        -:   39:
function _ZN8Password8has_nullENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 90%
        1:   40:bool Password::has_null(string phrase){
        -:   41:  
        3:   42:  for (char c : phrase) {
call    0 returned 1
call    1 returned 1
call    2 returned 2
call    3 returned 2
call    4 returned 3
branch  5 taken 2
branch  6 taken 1 (fallthrough)
        2:   43:    if(c == NULL){
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   44:      return true;
        -:   45:    }
        -:   46:  }
        1:   47:  return false;
        -:   48:}
        -:   49:
